/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones = 'Pacific/Midway' | 'Pacific/Niue' | 'Pacific/Honolulu' | 'Pacific/Rarotonga' | 'America/Anchorage' | 'Pacific/Gambier' | 'America/Los_Angeles' | 'America/Tijuana' | 'America/Denver' | 'America/Phoenix' | 'America/Chicago' | 'America/Guatemala' | 'America/New_York' | 'America/Bogota' | 'America/Caracas' | 'America/Santiago' | 'America/Buenos_Aires' | 'America/Sao_Paulo' | 'Atlantic/South_Georgia' | 'Atlantic/Azores' | 'Atlantic/Cape_Verde' | 'Europe/London' | 'Europe/Berlin' | 'Africa/Lagos' | 'Europe/Athens' | 'Africa/Cairo' | 'Europe/Moscow' | 'Asia/Riyadh' | 'Asia/Dubai' | 'Asia/Baku' | 'Asia/Karachi' | 'Asia/Tashkent' | 'Asia/Calcutta' | 'Asia/Dhaka' | 'Asia/Almaty' | 'Asia/Jakarta' | 'Asia/Bangkok' | 'Asia/Shanghai' | 'Asia/Singapore' | 'Asia/Tokyo' | 'Asia/Seoul' | 'Australia/Brisbane' | 'Australia/Sydney' | 'Pacific/Guam' | 'Pacific/Noumea' | 'Pacific/Auckland' | 'Pacific/Fiji';
export interface Config {
    auth: {
        users: UserAuthOperations;
        customers: CustomerAuthOperations;
    };
    blocks: {};
    collections: {
        wines: Wine;
        'wine-variants': WineVariant;
        wineries: Winery;
        regions: Region;
        wineCountries: WineCountry;
        'grape-varieties': GrapeVariety;
        tags: Tag;
        aromas: Aroma;
        adjectives: Adjective;
        flavours: Flavour;
        styles: Style;
        climates: Climate;
        moods: Mood;
        foods: Food;
        'active-carts': ActiveCart;
        'saved-carts': SavedCart;
        'shared-carts': SharedCart;
        pages: Page;
        posts: Post;
        media: Media;
        categories: Category;
        users: User;
        customers: Customer;
        marketingEmails: MarketingEmail;
        'magic-links': MagicLink;
        sessions: Session;
        'ui-translations': UiTranslation;
        navigation: Navigation;
        slideshows: Slideshow;
        'stock-reservations': StockReservation;
        orders: Order;
        addresses: Address;
        redirects: Redirect;
        forms: Form;
        'form-submissions': FormSubmission;
        'payload-jobs': PayloadJob;
        'payload-locked-documents': PayloadLockedDocument;
        'payload-preferences': PayloadPreference;
        'payload-migrations': PayloadMigration;
    };
    collectionsJoins: {
        wines: {
            variants: 'wine-variants';
        };
        wineCountries: {
            regions: 'regions';
        };
    };
    collectionsSelect: {
        wines: WinesSelect<false> | WinesSelect<true>;
        'wine-variants': WineVariantsSelect<false> | WineVariantsSelect<true>;
        wineries: WineriesSelect<false> | WineriesSelect<true>;
        regions: RegionsSelect<false> | RegionsSelect<true>;
        wineCountries: WineCountriesSelect<false> | WineCountriesSelect<true>;
        'grape-varieties': GrapeVarietiesSelect<false> | GrapeVarietiesSelect<true>;
        tags: TagsSelect<false> | TagsSelect<true>;
        aromas: AromasSelect<false> | AromasSelect<true>;
        adjectives: AdjectivesSelect<false> | AdjectivesSelect<true>;
        flavours: FlavoursSelect<false> | FlavoursSelect<true>;
        styles: StylesSelect<false> | StylesSelect<true>;
        climates: ClimatesSelect<false> | ClimatesSelect<true>;
        moods: MoodsSelect<false> | MoodsSelect<true>;
        foods: FoodsSelect<false> | FoodsSelect<true>;
        'active-carts': ActiveCartsSelect<false> | ActiveCartsSelect<true>;
        'saved-carts': SavedCartsSelect<false> | SavedCartsSelect<true>;
        'shared-carts': SharedCartsSelect<false> | SharedCartsSelect<true>;
        pages: PagesSelect<false> | PagesSelect<true>;
        posts: PostsSelect<false> | PostsSelect<true>;
        media: MediaSelect<false> | MediaSelect<true>;
        categories: CategoriesSelect<false> | CategoriesSelect<true>;
        users: UsersSelect<false> | UsersSelect<true>;
        customers: CustomersSelect<false> | CustomersSelect<true>;
        marketingEmails: MarketingEmailsSelect<false> | MarketingEmailsSelect<true>;
        'magic-links': MagicLinksSelect<false> | MagicLinksSelect<true>;
        sessions: SessionsSelect<false> | SessionsSelect<true>;
        'ui-translations': UiTranslationsSelect<false> | UiTranslationsSelect<true>;
        navigation: NavigationSelect<false> | NavigationSelect<true>;
        slideshows: SlideshowsSelect<false> | SlideshowsSelect<true>;
        'stock-reservations': StockReservationsSelect<false> | StockReservationsSelect<true>;
        orders: OrdersSelect<false> | OrdersSelect<true>;
        addresses: AddressesSelect<false> | AddressesSelect<true>;
        redirects: RedirectsSelect<false> | RedirectsSelect<true>;
        forms: FormsSelect<false> | FormsSelect<true>;
        'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
        'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
        'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
        'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
        'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
    };
    db: {
        defaultIDType: number;
    };
    globals: {};
    globalsSelect: {};
    locale: 'en' | 'sl';
    user: (User & {
        collection: 'users';
    }) | (Customer & {
        collection: 'customers';
    });
    jobs: {
        tasks: {
            'cleanup-expired-reservations': TaskCleanupExpiredReservations;
            schedulePublish: TaskSchedulePublish;
            inline: {
                input: unknown;
                output: unknown;
            };
        };
        workflows: unknown;
    };
}
export interface UserAuthOperations {
    forgotPassword: {
        email: string;
        password: string;
    };
    login: {
        email: string;
        password: string;
    };
    registerFirstUser: {
        email: string;
        password: string;
    };
    unlock: {
        email: string;
        password: string;
    };
}
export interface CustomerAuthOperations {
    forgotPassword: {
        email: string;
        password: string;
    };
    login: {
        email: string;
        password: string;
    };
    registerFirstUser: {
        email: string;
        password: string;
    };
    unlock: {
        email: string;
        password: string;
    };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wines".
 */
export interface Wine {
    id: number;
    winery: number | Winery;
    title: string;
    region: number | Region;
    style: number | Style;
    description?: string | null;
    variants?: {
        docs?: (number | WineVariant)[];
        hasNextPage?: boolean;
        totalDocs?: number;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug?: string | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wineries".
 */
export interface Winery {
    id: number;
    title: string;
    wineryCode: string;
    general?: {
        description?: string | null;
        whyCool?: string | null;
        /**
         * Tags, farming practices, etc.
         */
        tags?: (number | Tag)[] | null;
    };
    social?: {
        social?: {
            instagram?: string | null;
            website?: string | null;
        };
        /**
         * Other wineries run by the same people or under the same ownership
         */
        relatedWineries?: (number | Winery)[] | null;
    };
    media?: {
        media?: (number | Media)[] | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
    id: number;
    title: string;
    description?: string | null;
    media?: {
        media?: (number | null) | Media;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
    id: number;
    alt?: string | null;
    caption?: {
        root: {
            type: string;
            children: {
                type: string;
                version: number;
                [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
        };
        [k: string]: unknown;
    } | null;
    cloudflareId?: string | null;
    updatedAt: string;
    createdAt: string;
    url?: string | null;
    thumbnailURL?: string | null;
    filename?: string | null;
    mimeType?: string | null;
    filesize?: number | null;
    width?: number | null;
    height?: number | null;
    focalX?: number | null;
    focalY?: number | null;
    sizes?: {
        thumbnail?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
        'wine-cards'?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
    };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
    id: number;
    title: string;
    whyCool: string;
    priceRange?: ('8-12' | '12-18' | '18-24' | '24-30' | '30-40' | '40-50' | '50-60') | null;
    climate?: (number | null) | Climate;
    general: {
        description?: string | null;
        country: number | WineCountry;
        /**
         * Neighbouring regions
         */
        neighbours?: (number | Region)[] | null;
        bestGrapes?: (number | GrapeVariety)[] | null;
        legends?: (number | Winery)[] | null;
    };
    media?: {
        media?: (number | Media)[] | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "climates".
 */
export interface Climate {
    id: number;
    title: string;
    description?: string | null;
    climate?: ('desert' | 'maritime' | 'mediterranean' | 'continental' | 'alpine') | null;
    climateTemperature?: ('cool' | 'moderate' | 'warm' | 'hot') | null;
    diurnalTemperatureRange?: ('low' | 'medium' | 'high') | null;
    climateHumidity?: ('dry' | 'moderate' | 'humid') | null;
    bestRegions?: (number | Region)[] | null;
    bestGrapes?: (number | GrapeVariety)[] | null;
    media?: {
        media?: (number | Media)[] | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "grape-varieties".
 */
export interface GrapeVariety {
    id: number;
    title: string;
    general?: {
        description?: string | null;
        typicalStyle?: string | null;
        whyCool?: string | null;
        character?: string | null;
        synonyms?: {
            title?: string | null;
            id?: string | null;
        }[] | null;
        skin?: ('red' | 'white') | null;
    };
    relationships?: {
        /**
         * Distinctive aromas of the grape variety.
         */
        distinctiveAromas?: (number | Aroma)[] | null;
        /**
         * Best regions for the grape variety.
         */
        bestRegions?: (number | Region)[] | null;
        /**
         * Grape varieties that are genetically related or commonly blended together
         */
        blendingPartners?: (number | GrapeVariety)[] | null;
        /**
         * Grape varieties similar in style.
         */
        similarVarieties?: (number | GrapeVariety)[] | null;
    };
    media?: {
        media?: (number | Media)[] | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aromas".
 */
export interface Aroma {
    id: number;
    /**
     * Automatically generated from adjective and flavour
     */
    title?: string | null;
    /**
     * Automatically generated from adjective and flavour slugs
     */
    slug?: string | null;
    adjective: number | Adjective;
    flavour: number | Flavour;
    media?: {
        media?: (number | null) | Media;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "adjectives".
 */
export interface Adjective {
    id: number;
    title: string;
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flavours".
 */
export interface Flavour {
    id: number;
    title: string;
    general: {
        category: 'fruit' | 'floral' | 'herbal' | 'mineral' | 'creamy' | 'earth' | 'wood' | 'other';
        /**
         * Color group for fruits and flowers
         */
        colorGroup?: ('red' | 'green' | 'yellow' | 'orange' | 'blue' | 'black' | 'white') | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wineCountries".
 */
export interface WineCountry {
    id: number;
    title: string;
    description?: string | null;
    whyCool?: string | null;
    landArea?: number | null;
    wineriesCount?: number | null;
    regions?: {
        docs?: (number | Region)[];
        hasNextPage?: boolean;
        totalDocs?: number;
    };
    bestRegions?: (number | Region)[] | null;
    bestGrapes?: (number | GrapeVariety)[] | null;
    legends?: (number | Winery)[] | null;
    media?: {
        media?: (number | Media)[] | null;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "styles".
 */
export interface Style {
    id: number;
    title: string;
    description?: string | null;
    iconKey: string;
    media?: {
        media?: (number | null) | Media;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wine-variants".
 */
export interface WineVariant {
    id: number;
    wine: number | Wine;
    size: '187' | '375' | '500' | '750' | '1500' | '3000' | '6000';
    /**
     * Use "NV" for Non-Vintage wines
     */
    vintage: string;
    sku?: string | null;
    details: {
        price: number;
        /**
         * Current stock level
         */
        stockOnHand: number;
        /**
         * Allow unlimited orders (max 100 bottles)
         */
        canBackorder?: boolean | null;
        /**
         * Maximum quantity that can be backordered
         */
        maxBackorderQuantity?: number | null;
        servingTemp?: ('6-8' | '8-10' | '10-12' | '12-14' | '14-16' | '16-18') | null;
        decanting?: boolean | null;
        foodPairing?: (number | Food)[] | null;
    };
    tasting?: {
        tastingProfile?: string | null;
        aromas?: (number | Aroma)[] | null;
        tags?: (number | Tag)[] | null;
        moods?: (number | Mood)[] | null;
        tastingNotes?: {
            dry?: number | null;
            ripe?: number | null;
            creamy?: number | null;
            oaky?: number | null;
            complex?: number | null;
            light?: number | null;
            smooth?: number | null;
            youthful?: number | null;
            energetic?: number | null;
            alcohol?: number | null;
        };
    };
    composition?: {
        grapeVarieties?: {
            variety?: (number | null) | GrapeVariety;
            percentage?: number | null;
            id?: string | null;
        }[] | null;
    };
    media?: {
        media?: (number | Media)[] | null;
    };
    slug?: string | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foods".
 */
export interface Food {
    id: number;
    title: string;
    description?: string | null;
    media?: {
        media?: (number | null) | Media;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "moods".
 */
export interface Mood {
    id: number;
    title: string;
    description?: string | null;
    media?: {
        media?: (number | null) | Media;
    };
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "active-carts".
 */
export interface ActiveCart {
    id: number;
    user?: (number | null) | Customer;
    sessionId?: string | null;
    items?: {
        wineVariant: number | WineVariant;
        quantity: number;
        addedAt: string;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
    id: number;
    customerEmail: string;
    name: string;
    /**
     * Customer addresses for shipping and billing
     */
    addresses?: (number | Address)[] | null;
    authMethods?: {
        provider: 'google' | 'facebook' | 'magicLink';
        providerId: string;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
    enableAPIKey?: boolean | null;
    apiKey?: string | null;
    apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addresses".
 */
export interface Address {
    id: number;
    user: number | Customer;
    isBusiness?: boolean | null;
    businessName?: string | null;
    vatNumber?: string | null;
    firstName: string;
    lastName: string;
    address1: string;
    address2?: string | null;
    city: string;
    postalCode: string;
    country: string;
    phone: string;
    /**
     * Set as default address for quick checkout
     */
    isDefault?: boolean | null;
    addressType: 'shipping' | 'billing';
    label: string;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "saved-carts".
 */
export interface SavedCart {
    id: number;
    name: string;
    user: number | Customer;
    items?: {
        wineVariant: number | WineVariant;
        quantity: number;
        addedAt: string;
        id?: string | null;
    }[] | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shared-carts".
 */
export interface SharedCart {
    id: number;
    shareId: string;
    items?: {
        wineVariant: number | WineVariant;
        quantity: number;
        addedAt: string;
        id?: string | null;
    }[] | null;
    createdAt: string;
    expiresAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
    id: number;
    title?: string | null;
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    publishedAt?: string | null;
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
    id: number;
    title: string;
    heroImage?: (number | null) | Media;
    content: {
        root: {
            type: string;
            children: {
                type: string;
                version: number;
                [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
        };
        [k: string]: unknown;
    };
    relatedPosts?: (number | Post)[] | null;
    categories?: (number | Category)[] | null;
    meta?: {
        title?: string | null;
        /**
         * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
         */
        image?: (number | null) | Media;
        description?: string | null;
    };
    publishedAt?: string | null;
    authors?: (number | User)[] | null;
    populatedAuthors?: {
        id?: string | null;
        name?: string | null;
    }[] | null;
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
    _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
    id: number;
    title: string;
    slug: string;
    slugLock?: boolean | null;
    parent?: (number | null) | Category;
    breadcrumbs?: {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
    id: number;
    name?: string | null;
    updatedAt: string;
    createdAt: string;
    email: string;
    resetPasswordToken?: string | null;
    resetPasswordExpiration?: string | null;
    salt?: string | null;
    hash?: string | null;
    loginAttempts?: number | null;
    lockUntil?: string | null;
    password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketingEmails".
 */
export interface MarketingEmail {
    id: number;
    name: string;
    type: 'magic-link' | 'welcome' | 'password-reset';
    subject: string;
    content: {
        root: {
            type: string;
            children: {
                type: string;
                version: number;
                [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
        };
        [k: string]: unknown;
    };
    variables?: {
        key: string;
        description: string;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "magic-links".
 */
export interface MagicLink {
    id: number;
    email: string;
    token: string;
    expires: number;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
    id: number;
    token: string;
    user: number | Customer;
    expires: number;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ui-translations".
 */
export interface UiTranslation {
    id: number;
    /**
     * Unique identifier for this translation
     */
    key: string;
    category: 'errors' | 'notifications' | 'general' | 'buttons' | 'form-labels' | 'navigation' | 'tasting-notes';
    translations: {
        en: string;
        sl: string;
    };
    /**
     * Optional description of where and how this translation is used
     */
    description?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
    id: number;
    title: string;
    /**
     * Type of menu item
     */
    type: 'collection' | 'page' | 'settings';
    /**
     * Icon name from our icon set
     */
    icon?: string | null;
    /**
     * Parent menu item (for nested menus)
     */
    parent?: (number | null) | Navigation;
    /**
     * Order in which this item appears in the menu
     */
    order: number;
    /**
     * Whether this item should be visible in the menu
     */
    isVisible?: boolean | null;
    link?: {
        type?: ('internal' | 'external') | null;
        internal?: {
            relationTo: 'pages';
            value: number | Page;
        } | null;
        external?: string | null;
    };
    settings?: {
        type?: ('language' | 'theme') | null;
    };
    slug: string;
    slugLock?: boolean | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "slideshows".
 */
export interface Slideshow {
    id: number;
    title: string;
    /**
     * Unique identifier for this slideshow (e.g., "wine-shop-hero")
     */
    key: string;
    slides: {
        media: number | Media;
        headline: string;
        tagline?: string | null;
        content?: {
            root: {
                type: string;
                children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
            };
            [k: string]: unknown;
        } | null;
        /**
         * Order in which this slide appears
         */
        order?: number | null;
        id?: string | null;
    }[];
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stock-reservations".
 */
export interface StockReservation {
    id: number;
    variant: number | WineVariant;
    quantity: number;
    expiresAt: string;
    status: 'active' | 'expired' | 'completed';
    order?: (number | null) | Order;
    /**
     * The cart this reservation belongs to
     */
    cart?: (number | null) | ActiveCart;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
    id: number;
    orderNumber: string;
    /**
     * Customer who placed the order (optional for guest checkouts)
     */
    customer?: (number | null) | Customer;
    /**
     * Session ID for guest checkouts
     */
    sessionId?: string | null;
    status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
    items: {
        variant: number | WineVariant;
        quantity: number;
        price: number;
        reservation: number | StockReservation;
        id?: string | null;
    }[];
    subtotal: number;
    shipping: number;
    tax: number;
    total: number;
    shippingAddress: {
        firstName: string;
        lastName: string;
        address1: string;
        address2?: string | null;
        city: string;
        postalCode: string;
        country: string;
        phone: string;
    };
    billingAddress: {
        firstName: string;
        lastName: string;
        address1: string;
        address2?: string | null;
        city: string;
        postalCode: string;
        country: string;
        phone: string;
    };
    paymentMethod: 'credit_card' | 'paypal' | 'bank_transfer' | 'pay_in_store';
    paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
    paymentIntentId?: string | null;
    notes?: string | null;
    trackingNumber?: string | null;
    /**
     * Upload the approved invoice PDF from the tax office
     */
    invoice?: (number | null) | Media;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
    id: number;
    /**
     * You will need to rebuild the website when changing this field.
     */
    from: string;
    to?: {
        type?: ('reference' | 'custom') | null;
        reference?: ({
            relationTo: 'pages';
            value: number | Page;
        } | null) | ({
            relationTo: 'posts';
            value: number | Post;
        } | null);
        url?: string | null;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
    id: number;
    title: string;
    fields?: ({
        name: string;
        label?: string | null;
        width?: number | null;
        required?: boolean | null;
        defaultValue?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'checkbox';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'country';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'email';
    } | {
        message?: {
            root: {
                type: string;
                children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
            };
            [k: string]: unknown;
        } | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'message';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        defaultValue?: number | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'number';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        defaultValue?: string | null;
        placeholder?: string | null;
        options?: {
            label: string;
            value: string;
            id?: string | null;
        }[] | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'select';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'state';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        defaultValue?: string | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'text';
    } | {
        name: string;
        label?: string | null;
        width?: number | null;
        defaultValue?: string | null;
        required?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'textarea';
    })[] | null;
    submitButtonLabel?: string | null;
    /**
     * Choose whether to display an on-page message or redirect to a different page after they submit the form.
     */
    confirmationType?: ('message' | 'redirect') | null;
    confirmationMessage?: {
        root: {
            type: string;
            children: {
                type: string;
                version: number;
                [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
        };
        [k: string]: unknown;
    } | null;
    redirect?: {
        url: string;
    };
    /**
     * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
     */
    emails?: {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
            root: {
                type: string;
                children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
            };
            [k: string]: unknown;
        } | null;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
    id: number;
    form: number | Form;
    submissionData?: {
        field: string;
        value: string;
        id?: string | null;
    }[] | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
    id: number;
    /**
     * Input data provided to the job
     */
    input?: {
        [k: string]: unknown;
    } | unknown[] | string | number | boolean | null;
    taskStatus?: {
        [k: string]: unknown;
    } | unknown[] | string | number | boolean | null;
    completedAt?: string | null;
    totalTried?: number | null;
    /**
     * If hasError is true this job will not be retried
     */
    hasError?: boolean | null;
    /**
     * If hasError is true, this is the error that caused it
     */
    error?: {
        [k: string]: unknown;
    } | unknown[] | string | number | boolean | null;
    /**
     * Task execution log
     */
    log?: {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'cleanup-expired-reservations' | 'schedulePublish';
        taskID: string;
        input?: {
            [k: string]: unknown;
        } | unknown[] | string | number | boolean | null;
        output?: {
            [k: string]: unknown;
        } | unknown[] | string | number | boolean | null;
        state: 'failed' | 'succeeded';
        error?: {
            [k: string]: unknown;
        } | unknown[] | string | number | boolean | null;
        id?: string | null;
    }[] | null;
    taskSlug?: ('inline' | 'cleanup-expired-reservations' | 'schedulePublish') | null;
    queue?: string | null;
    waitUntil?: string | null;
    processing?: boolean | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
    id: number;
    document?: ({
        relationTo: 'wines';
        value: number | Wine;
    } | null) | ({
        relationTo: 'wine-variants';
        value: number | WineVariant;
    } | null) | ({
        relationTo: 'wineries';
        value: number | Winery;
    } | null) | ({
        relationTo: 'regions';
        value: number | Region;
    } | null) | ({
        relationTo: 'wineCountries';
        value: number | WineCountry;
    } | null) | ({
        relationTo: 'grape-varieties';
        value: number | GrapeVariety;
    } | null) | ({
        relationTo: 'tags';
        value: number | Tag;
    } | null) | ({
        relationTo: 'aromas';
        value: number | Aroma;
    } | null) | ({
        relationTo: 'adjectives';
        value: number | Adjective;
    } | null) | ({
        relationTo: 'flavours';
        value: number | Flavour;
    } | null) | ({
        relationTo: 'styles';
        value: number | Style;
    } | null) | ({
        relationTo: 'climates';
        value: number | Climate;
    } | null) | ({
        relationTo: 'moods';
        value: number | Mood;
    } | null) | ({
        relationTo: 'foods';
        value: number | Food;
    } | null) | ({
        relationTo: 'active-carts';
        value: number | ActiveCart;
    } | null) | ({
        relationTo: 'saved-carts';
        value: number | SavedCart;
    } | null) | ({
        relationTo: 'shared-carts';
        value: number | SharedCart;
    } | null) | ({
        relationTo: 'pages';
        value: number | Page;
    } | null) | ({
        relationTo: 'posts';
        value: number | Post;
    } | null) | ({
        relationTo: 'media';
        value: number | Media;
    } | null) | ({
        relationTo: 'categories';
        value: number | Category;
    } | null) | ({
        relationTo: 'users';
        value: number | User;
    } | null) | ({
        relationTo: 'customers';
        value: number | Customer;
    } | null) | ({
        relationTo: 'marketingEmails';
        value: number | MarketingEmail;
    } | null) | ({
        relationTo: 'magic-links';
        value: number | MagicLink;
    } | null) | ({
        relationTo: 'sessions';
        value: number | Session;
    } | null) | ({
        relationTo: 'ui-translations';
        value: number | UiTranslation;
    } | null) | ({
        relationTo: 'navigation';
        value: number | Navigation;
    } | null) | ({
        relationTo: 'slideshows';
        value: number | Slideshow;
    } | null) | ({
        relationTo: 'stock-reservations';
        value: number | StockReservation;
    } | null) | ({
        relationTo: 'orders';
        value: number | Order;
    } | null) | ({
        relationTo: 'addresses';
        value: number | Address;
    } | null) | ({
        relationTo: 'redirects';
        value: number | Redirect;
    } | null) | ({
        relationTo: 'forms';
        value: number | Form;
    } | null) | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
    } | null) | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
    } | null);
    globalSlug?: string | null;
    user: {
        relationTo: 'users';
        value: number | User;
    } | {
        relationTo: 'customers';
        value: number | Customer;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
    id: number;
    user: {
        relationTo: 'users';
        value: number | User;
    } | {
        relationTo: 'customers';
        value: number | Customer;
    };
    key?: string | null;
    value?: {
        [k: string]: unknown;
    } | unknown[] | string | number | boolean | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
    id: number;
    name?: string | null;
    batch?: number | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wines_select".
 */
export interface WinesSelect<T extends boolean = true> {
    winery?: T;
    title?: T;
    region?: T;
    style?: T;
    description?: T;
    variants?: T;
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wine-variants_select".
 */
export interface WineVariantsSelect<T extends boolean = true> {
    wine?: T;
    size?: T;
    vintage?: T;
    sku?: T;
    details?: T | {
        price?: T;
        stockOnHand?: T;
        canBackorder?: T;
        maxBackorderQuantity?: T;
        servingTemp?: T;
        decanting?: T;
        foodPairing?: T;
    };
    tasting?: T | {
        tastingProfile?: T;
        aromas?: T;
        tags?: T;
        moods?: T;
        tastingNotes?: T | {
            dry?: T;
            ripe?: T;
            creamy?: T;
            oaky?: T;
            complex?: T;
            light?: T;
            smooth?: T;
            youthful?: T;
            energetic?: T;
            alcohol?: T;
        };
    };
    composition?: T | {
        grapeVarieties?: T | {
            variety?: T;
            percentage?: T;
            id?: T;
        };
    };
    media?: T | {
        media?: T;
    };
    slug?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wineries_select".
 */
export interface WineriesSelect<T extends boolean = true> {
    title?: T;
    wineryCode?: T;
    general?: T | {
        description?: T;
        whyCool?: T;
        tags?: T;
    };
    social?: T | {
        social?: T | {
            instagram?: T;
            website?: T;
        };
        relatedWineries?: T;
    };
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
    title?: T;
    whyCool?: T;
    priceRange?: T;
    climate?: T;
    general?: T | {
        description?: T;
        country?: T;
        neighbours?: T;
        bestGrapes?: T;
        legends?: T;
    };
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wineCountries_select".
 */
export interface WineCountriesSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    whyCool?: T;
    landArea?: T;
    wineriesCount?: T;
    regions?: T;
    bestRegions?: T;
    bestGrapes?: T;
    legends?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "grape-varieties_select".
 */
export interface GrapeVarietiesSelect<T extends boolean = true> {
    title?: T;
    general?: T | {
        description?: T;
        typicalStyle?: T;
        whyCool?: T;
        character?: T;
        synonyms?: T | {
            title?: T;
            id?: T;
        };
        skin?: T;
    };
    relationships?: T | {
        distinctiveAromas?: T;
        bestRegions?: T;
        blendingPartners?: T;
        similarVarieties?: T;
    };
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aromas_select".
 */
export interface AromasSelect<T extends boolean = true> {
    title?: T;
    slug?: T;
    adjective?: T;
    flavour?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "adjectives_select".
 */
export interface AdjectivesSelect<T extends boolean = true> {
    title?: T;
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flavours_select".
 */
export interface FlavoursSelect<T extends boolean = true> {
    title?: T;
    general?: T | {
        category?: T;
        colorGroup?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "styles_select".
 */
export interface StylesSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    iconKey?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "climates_select".
 */
export interface ClimatesSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    climate?: T;
    climateTemperature?: T;
    diurnalTemperatureRange?: T;
    climateHumidity?: T;
    bestRegions?: T;
    bestGrapes?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "moods_select".
 */
export interface MoodsSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foods_select".
 */
export interface FoodsSelect<T extends boolean = true> {
    title?: T;
    description?: T;
    media?: T | {
        media?: T;
    };
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "active-carts_select".
 */
export interface ActiveCartsSelect<T extends boolean = true> {
    user?: T;
    sessionId?: T;
    items?: T | {
        wineVariant?: T;
        quantity?: T;
        addedAt?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "saved-carts_select".
 */
export interface SavedCartsSelect<T extends boolean = true> {
    name?: T;
    user?: T;
    items?: T | {
        wineVariant?: T;
        quantity?: T;
        addedAt?: T;
        id?: T;
    };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shared-carts_select".
 */
export interface SharedCartsSelect<T extends boolean = true> {
    shareId?: T;
    items?: T | {
        wineVariant?: T;
        quantity?: T;
        addedAt?: T;
        id?: T;
    };
    createdAt?: T;
    expiresAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
    title?: T;
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    publishedAt?: T;
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
    title?: T;
    heroImage?: T;
    content?: T;
    relatedPosts?: T;
    categories?: T;
    meta?: T | {
        title?: T;
        image?: T;
        description?: T;
    };
    publishedAt?: T;
    authors?: T;
    populatedAuthors?: T | {
        id?: T;
        name?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
    _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
    alt?: T;
    caption?: T;
    cloudflareId?: T;
    updatedAt?: T;
    createdAt?: T;
    url?: T;
    thumbnailURL?: T;
    filename?: T;
    mimeType?: T;
    filesize?: T;
    width?: T;
    height?: T;
    focalX?: T;
    focalY?: T;
    sizes?: T | {
        thumbnail?: T | {
            url?: T;
            width?: T;
            height?: T;
            mimeType?: T;
            filesize?: T;
            filename?: T;
        };
        'wine-cards'?: T | {
            url?: T;
            width?: T;
            height?: T;
            mimeType?: T;
            filesize?: T;
            filename?: T;
        };
    };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
    title?: T;
    slug?: T;
    slugLock?: T;
    parent?: T;
    breadcrumbs?: T | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
    name?: T;
    updatedAt?: T;
    createdAt?: T;
    email?: T;
    resetPasswordToken?: T;
    resetPasswordExpiration?: T;
    salt?: T;
    hash?: T;
    loginAttempts?: T;
    lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
    customerEmail?: T;
    name?: T;
    addresses?: T;
    authMethods?: T | {
        provider?: T;
        providerId?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
    enableAPIKey?: T;
    apiKey?: T;
    apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "marketingEmails_select".
 */
export interface MarketingEmailsSelect<T extends boolean = true> {
    name?: T;
    type?: T;
    subject?: T;
    content?: T;
    variables?: T | {
        key?: T;
        description?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "magic-links_select".
 */
export interface MagicLinksSelect<T extends boolean = true> {
    email?: T;
    token?: T;
    expires?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
    token?: T;
    user?: T;
    expires?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ui-translations_select".
 */
export interface UiTranslationsSelect<T extends boolean = true> {
    key?: T;
    category?: T;
    translations?: T | {
        en?: T;
        sl?: T;
    };
    description?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
    title?: T;
    type?: T;
    icon?: T;
    parent?: T;
    order?: T;
    isVisible?: T;
    link?: T | {
        type?: T;
        internal?: T;
        external?: T;
    };
    settings?: T | {
        type?: T;
    };
    slug?: T;
    slugLock?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "slideshows_select".
 */
export interface SlideshowsSelect<T extends boolean = true> {
    title?: T;
    key?: T;
    slides?: T | {
        media?: T;
        headline?: T;
        tagline?: T;
        content?: T;
        order?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stock-reservations_select".
 */
export interface StockReservationsSelect<T extends boolean = true> {
    variant?: T;
    quantity?: T;
    expiresAt?: T;
    status?: T;
    order?: T;
    cart?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
    orderNumber?: T;
    customer?: T;
    sessionId?: T;
    status?: T;
    items?: T | {
        variant?: T;
        quantity?: T;
        price?: T;
        reservation?: T;
        id?: T;
    };
    subtotal?: T;
    shipping?: T;
    tax?: T;
    total?: T;
    shippingAddress?: T | {
        firstName?: T;
        lastName?: T;
        address1?: T;
        address2?: T;
        city?: T;
        postalCode?: T;
        country?: T;
        phone?: T;
    };
    billingAddress?: T | {
        firstName?: T;
        lastName?: T;
        address1?: T;
        address2?: T;
        city?: T;
        postalCode?: T;
        country?: T;
        phone?: T;
    };
    paymentMethod?: T;
    paymentStatus?: T;
    paymentIntentId?: T;
    notes?: T;
    trackingNumber?: T;
    invoice?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addresses_select".
 */
export interface AddressesSelect<T extends boolean = true> {
    user?: T;
    isBusiness?: T;
    businessName?: T;
    vatNumber?: T;
    firstName?: T;
    lastName?: T;
    address1?: T;
    address2?: T;
    city?: T;
    postalCode?: T;
    country?: T;
    phone?: T;
    isDefault?: T;
    addressType?: T;
    label?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
    from?: T;
    to?: T | {
        type?: T;
        reference?: T;
        url?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
    title?: T;
    fields?: T | {
        checkbox?: T | {
            name?: T;
            label?: T;
            width?: T;
            required?: T;
            defaultValue?: T;
            id?: T;
            blockName?: T;
        };
        country?: T | {
            name?: T;
            label?: T;
            width?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
        email?: T | {
            name?: T;
            label?: T;
            width?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
        message?: T | {
            message?: T;
            id?: T;
            blockName?: T;
        };
        number?: T | {
            name?: T;
            label?: T;
            width?: T;
            defaultValue?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
        select?: T | {
            name?: T;
            label?: T;
            width?: T;
            defaultValue?: T;
            placeholder?: T;
            options?: T | {
                label?: T;
                value?: T;
                id?: T;
            };
            required?: T;
            id?: T;
            blockName?: T;
        };
        state?: T | {
            name?: T;
            label?: T;
            width?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
        text?: T | {
            name?: T;
            label?: T;
            width?: T;
            defaultValue?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
        textarea?: T | {
            name?: T;
            label?: T;
            width?: T;
            defaultValue?: T;
            required?: T;
            id?: T;
            blockName?: T;
        };
    };
    submitButtonLabel?: T;
    confirmationType?: T;
    confirmationMessage?: T;
    redirect?: T | {
        url?: T;
    };
    emails?: T | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
    form?: T;
    submissionData?: T | {
        field?: T;
        value?: T;
        id?: T;
    };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
    input?: T;
    taskStatus?: T;
    completedAt?: T;
    totalTried?: T;
    hasError?: T;
    error?: T;
    log?: T | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
    };
    taskSlug?: T;
    queue?: T;
    waitUntil?: T;
    processing?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
    document?: T;
    globalSlug?: T;
    user?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
    user?: T;
    key?: T;
    value?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
    name?: T;
    batch?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCleanup-expired-reservations".
 */
export interface TaskCleanupExpiredReservations {
    input?: unknown;
    output: {
        expiredCount: number;
    };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
    input: {
        type?: ('publish' | 'unpublish') | null;
        locale?: string | null;
        doc?: ({
            relationTo: 'pages';
            value: number | Page;
        } | null) | ({
            relationTo: 'posts';
            value: number | Post;
        } | null);
        global?: string | null;
        user?: (number | null) | User;
    };
    output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
    [k: string]: unknown;
}
